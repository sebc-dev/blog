import { describe, it, expect, beforeAll } from "vitest";
import { existsSync } from "node:fs";
import path from "node:path";
import {
  LighthouseCriteriaValidator,
  type PerformanceCriteria,
} from "./utils/lighthouse-criteria";

/**
 * Tests de Performance Lighthouse 100/100
 * Bas√©s sur les crit√®res document√©s dans /memory/docs/
 *
 * Ce test v√©rifie que le build respecte TOUS les crit√®res n√©cessaires
 * pour atteindre un score Lighthouse parfait (100/100)
 */

describe("üöÄ Lighthouse 100/100 Performance Tests", () => {
  let validator: LighthouseCriteriaValidator;
  let criteria: PerformanceCriteria;

  beforeAll(async () => {
    // Create absolute path for dist directory
    const distPath = path.resolve(__dirname, "../dist");
    
    // V√©rifier que le build existe
    expect(existsSync(distPath)).toBe(true);

    // Initialiser le validateur
    validator = new LighthouseCriteriaValidator("./dist");

    // Ex√©cuter toutes les validations
    criteria = await validator.validateAllCriteria();
  });

  describe("üìä Core Web Vitals Optimization", () => {
    it("should optimize for LCP (Largest Contentful Paint) < 2.5s", () => {
      expect(criteria.lcpOptimized).toBe(true);

      if (!criteria.lcpOptimized) {
        console.log(`
‚ùå LCP Optimization Failed
Required optimizations:
- ‚úÖ Font preload with crossorigin
- ‚úÖ fetchpriority="high" for critical images  
- ‚úÖ Critical CSS inline
- ‚úÖ Minimal render-blocking resources
- ‚úÖ Priority attribute for hero images
        `);
      }
    });

    it("should optimize for CLS (Cumulative Layout Shift) < 0.1", () => {
      expect(criteria.clsOptimized).toBe(true);

      if (!criteria.clsOptimized) {
        console.log(`
‚ùå CLS Optimization Failed
Required optimizations:
- ‚úÖ Explicit dimensions for all images
- ‚úÖ font-display: swap for web fonts
- ‚úÖ size-adjust property (2024 technique)
- ‚úÖ aspect-ratio CSS property
- ‚úÖ Reserved space for dynamic content
        `);
      }
    });

    it("should optimize for INP (Interaction to Next Paint) < 200ms", () => {
      expect(criteria.inpOptimized).toBe(true);

      if (!criteria.inpOptimized) {
        console.log(`
‚ùå INP Optimization Failed
Required optimizations:
- ‚úÖ DaisyUI native components (CSS-only)
- ‚úÖ requestAnimationFrame for scroll handlers
- ‚úÖ Passive event listeners
- ‚úÖ DOM complexity < 1500 elements
- ‚úÖ scheduler.yield() for long tasks
        `);
      }
    });
  });

  describe("‚ö° Performance Assets", () => {
    it("should have optimized assets bundle size", () => {
      expect(criteria.assetsOptimized).toBe(true);

      if (!criteria.assetsOptimized) {
        console.log(`
‚ùå Assets Optimization Failed
Requirements:
- ‚úÖ Total assets size < 500KB
- ‚úÖ _astro directory present
- ‚úÖ Proper asset bundling
        `);
      }
    });

    it("should have optimized images", () => {
      expect(criteria.imagesOptimized).toBe(true);

      if (!criteria.imagesOptimized) {
        console.log(`
‚ùå Images Optimization Failed
Requirements:
- ‚úÖ Modern formats (WebP, AVIF)
- ‚úÖ Lazy loading for non-critical images
- ‚úÖ Priority loading for critical images
- ‚úÖ Proper alt attributes
        `);
      }
    });

    it("should have optimized fonts", () => {
      expect(criteria.fontsOptimized).toBe(true);

      if (!criteria.fontsOptimized) {
        console.log(`
‚ùå Fonts Optimization Failed
Requirements:
- ‚úÖ Font preload with rel="preload"
- ‚úÖ crossorigin attribute for fonts
- ‚úÖ font-display: swap
- ‚úÖ Variable fonts when possible
        `);
      }
    });

    it("should have optimized CSS", () => {
      expect(criteria.cssOptimized).toBe(true);

      if (!criteria.cssOptimized) {
        console.log(`
‚ùå CSS Optimization Failed
Requirements:
- ‚úÖ Minimal CSS files (bundling)
- ‚úÖ CSS file size < 100KB each
- ‚úÖ Critical CSS inline
- ‚úÖ TailwindCSS purged
        `);
      }
    });

    it("should have optimized JavaScript", () => {
      expect(criteria.jsOptimized).toBe(true);

      if (!criteria.jsOptimized) {
        console.log(`
‚ùå JavaScript Optimization Failed
Requirements:
- ‚úÖ Minimal JS files (< 5 files)
- ‚úÖ JS file size < 50KB each
- ‚úÖ Astro static generation
- ‚úÖ No unnecessary client-side JS
        `);
      }
    });
  });

  describe("‚ôø Accessibility (100/100)", () => {
    it("should be fully accessible", () => {
      expect(criteria.accessibilityCompliant).toBe(true);

      if (!criteria.accessibilityCompliant) {
        console.log(`
‚ùå Accessibility Failed
Requirements:
- ‚úÖ lang attribute on html
- ‚úÖ alt text for all images
- ‚úÖ Proper heading structure (single h1)
- ‚úÖ Keyboard navigation support
- ‚úÖ ARIA labels where needed
        `);
      }
    });
  });

  describe("üîç SEO (100/100)", () => {
    it("should be SEO optimized", () => {
      expect(criteria.seoOptimized).toBe(true);

      if (!criteria.seoOptimized) {
        console.log(`
‚ùå SEO Optimization Failed
Requirements:
- ‚úÖ Meta description on all pages
- ‚úÖ Canonical URLs
- ‚úÖ Open Graph tags
- ‚úÖ JSON-LD structured data
- ‚úÖ Proper URL structure
        `);
      }
    });
  });

  describe("‚úÖ Best Practices (100/100)", () => {
    it("should follow best practices", () => {
      expect(criteria.bestPracticesCompliant).toBe(true);

      if (!criteria.bestPracticesCompliant) {
        console.log(`
‚ùå Best Practices Failed
Requirements:
- ‚úÖ Viewport meta tag
- ‚úÖ Charset declaration
- ‚úÖ HTTPS enforcement
- ‚úÖ No console errors
- ‚úÖ Security headers
        `);
      }
    });
  });

  describe("üéØ Overall Performance Summary", () => {
    it("should achieve Lighthouse 100/100 on all metrics", () => {
      expect(Object.values(criteria)).toStrictEqual(
        new Array(Object.keys(criteria).length).fill(true)
      );

      const allCriteriaMet = Object.values(criteria).every(
        criterion => criterion === true
      );

      if (!allCriteriaMet) {
        console.log(`
üéØ LIGHTHOUSE 100/100 SUMMARY
=============================

Performance Metrics:
- LCP Optimized: ${criteria.lcpOptimized ? "‚úÖ" : "‚ùå"}
- CLS Optimized: ${criteria.clsOptimized ? "‚úÖ" : "‚ùå"}
- INP Optimized: ${criteria.inpOptimized ? "‚úÖ" : "‚ùå"}

Assets Optimization:
- Assets: ${criteria.assetsOptimized ? "‚úÖ" : "‚ùå"}
- Images: ${criteria.imagesOptimized ? "‚úÖ" : "‚ùå"}
- Fonts: ${criteria.fontsOptimized ? "‚úÖ" : "‚ùå"}
- CSS: ${criteria.cssOptimized ? "‚úÖ" : "‚ùå"}
- JavaScript: ${criteria.jsOptimized ? "‚úÖ" : "‚ùå"}

Quality Scores:
- Accessibility: ${criteria.accessibilityCompliant ? "‚úÖ" : "‚ùå"}
- SEO: ${criteria.seoOptimized ? "‚úÖ" : "‚ùå"}
- Best Practices: ${criteria.bestPracticesCompliant ? "‚úÖ" : "‚ùå"}

Status: ${allCriteriaMet ? "üéâ READY FOR LIGHTHOUSE 100/100" : "üîß NEEDS OPTIMIZATION"}
        `);
      } else {
        console.log(`
üéâ LIGHTHOUSE 100/100 ACHIEVED!
===============================

Toutes les optimisations sont en place:
‚úÖ Core Web Vitals optimis√©s
‚úÖ Assets performance optimis√©s
‚úÖ Accessibilit√© 100/100
‚úÖ SEO 100/100
‚úÖ Best Practices 100/100

Votre build respecte TOUS les crit√®res document√©s dans /memory/docs/
        `);
      }
    });
  });

  describe("üìã Detailed Performance Metrics", () => {
    it("should provide detailed performance insights", async () => {
      // Ce test fournit des m√©triques d√©taill√©es m√™me en cas de succ√®s
      const insights = {
        totalCriteria: Object.keys(criteria).length,
        passedCriteria: Object.values(criteria).filter(c => c === true).length,
        failedCriteria: Object.values(criteria).filter(c => c === false).length,
        successRate: Math.round(
          (Object.values(criteria).filter(c => c === true).length /
            Object.keys(criteria).length) *
            100
        ),
      };

      console.log(`
üìä PERFORMANCE INSIGHTS
=======================

Total Criteria Checked: ${insights.totalCriteria}
Passed: ${insights.passedCriteria}
Failed: ${insights.failedCriteria}
Success Rate: ${insights.successRate}%

Criteria Details:
- LCP (Largest Contentful Paint): ${criteria.lcpOptimized ? "PASS" : "FAIL"}
- CLS (Cumulative Layout Shift): ${criteria.clsOptimized ? "PASS" : "FAIL"}
- INP (Interaction to Next Paint): ${criteria.inpOptimized ? "PASS" : "FAIL"}
- Assets Optimization: ${criteria.assetsOptimized ? "PASS" : "FAIL"}
- Images Optimization: ${criteria.imagesOptimized ? "PASS" : "FAIL"}
- Fonts Optimization: ${criteria.fontsOptimized ? "PASS" : "FAIL"}
- CSS Optimization: ${criteria.cssOptimized ? "PASS" : "FAIL"}
- JavaScript Optimization: ${criteria.jsOptimized ? "PASS" : "FAIL"}
- Accessibility: ${criteria.accessibilityCompliant ? "PASS" : "FAIL"}
- SEO: ${criteria.seoOptimized ? "PASS" : "FAIL"}
- Best Practices: ${criteria.bestPracticesCompliant ? "PASS" : "FAIL"}
      `);

      // Le test passe toujours mais fournit des insights
      expect(insights.totalCriteria).toBeGreaterThan(0);
    });
  });
});
